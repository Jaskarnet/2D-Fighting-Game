plugins {
    id 'org.beryx.runtime' version '1.8.4'
}
apply plugin: "java"


sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs = ["../assets"]

mainClassName = "com.mygdx.game.DesktopLauncher"
def osName = System.getProperty('os.name').toLowerCase(Locale.ROOT)
project.ext.assetsDir = new File("../core/assets")

tasks.register('runGame', JavaExec) {
    dependsOn classes
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true as JavaExecSpec
}

tasks.register('debug', JavaExec) {
    dependsOn classes
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true as JavaExecSpec
    debug = true as JavaExec
}

tasks.register('dist', Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    destinationDirectory = file("$buildDir/lib")
}
jpackageImage.dependsOn dist


dist.dependsOn classes

eclipse.project.name = appName + "-desktop"

runtime {
    options = ['--strip-debug',
               '--compress', '2',
               '--no-header-files',
               '--no-man-pages',
               '--strip-native-commands',
               '--vm', 'server']
    modules = ['java.base' ,
               'java.desktop',
               'jdk.unsupported']
    distDir = file(buildDir)
    jpackage {
        jpackageHome = 'C:\\Program Files\\Java\\jdk-17.0.1'
        mainJar = dist.archiveFileName.get()
        if (osName.contains('windows')) {
            imageOptions = ["--icon", file("../icons/icon.ico")] as List<String>
        } else if (osName.contains('linux')) {
            imageOptions = ["--icon", file("../icons/icon.png")] as List<String>
        } else if (osName.contains('mac')) {
            imageOptions = ["--icon", file("../icons/icon.icns")] as List<String>
        }
    }
}
